 1.1 Версии программного кода 

commit - сохранение промежуточных версий

Три состояния файлов

Изменён
Готов к коммиту
Закоммичен

Посмотреть состояние можно с помощью git status

git add <file>... - подготовить файл к добавлению в коммит
git add . - добавить текущюю папку

git commit - сделать коммит
git commit -m "сообщение" - комментарий к коммиту

git log - посмотреть логи коммитов

Комманды: 
git status
git add <file(s)>
git commit -m "message"
git log


 1.2 Установка Git 

git init - создает репозиторий в текущей папке


 1.3 Индекс и частичные коммиты

git add -p <file(s)> - частичное добавление файла

".gitignore" - перечень файлов которые не нужно отслеживать

git rm --cached <files(s)> - удалить файл из отслеживаемых

git rm - удаляет файлы

git mv - переиминовывает и удаляет файлы

Комманды: 
git add
git rm
git mv


 1.4 Сравнение версий 

git show - посмотреть последний коммит

git diff <commit1 hash> <commit2 hash> - посмотреть изменения
git diff HEAD~2

git diff <files> - изменения до коммита

git diff --name-only - изменения в таких файлах

Комманды: 
git show
git diff


 1.5 Отмена изменений и откат версий 

git checkout -- <files> - отмена изменений в файлах

git reset HEAD <files> - отмена изменений после добавления в коммит

git commit --amend - позволяет объединить проиндексированные изменения с предыдущим коммитом без создания нового коммита.

git revert <commit hash> - откатить до версии

git reset --(hard/ soft/ mixed) <commit hash>
git reset --hard <commit hash> - жесткий откат

git reset --soft <commit hash> - отправляет предыдущие изменения в подготовленное состояние

git reset --mixed(default) - отменяет коммит но оставляет файл

git commit -a - сразу добавляет все изменения в коммит


Резюме git reset

Команда reset в заранее определённом порядке перезаписывает
три дерева Git, останавливаясь тогда, когда вы ей скажете:

- Перемещает ветку, на которую указывает HEAD 
  (останавливается на этом, если указана опция --soft)

- Делает Индекс таким же как и HEAD 
  (останавливается на этом, если не указана опция --hard)

- Делает Рабочий Каталог таким же как и Индекс.


Комманды: 
git checkout
git commit --amend
git revert
git reset


 1.6 Репозитории и коллективная работа 

git clone <url> - получить рабочую копию с сервера

git push - отправить репозиторий на сервер

git pull - получить репозиторий с сервера

Комманды: 
git init
git clone
git push
git pull


 1.7 Ветки: создание и управление 

git checkout -b "branch_name" - создать новую ветку

git checkout "branch_name" - переключиться на другую ветку

git push -u origin branch_name - отправить ветку

git branch -m old_name new_name - переименовать ветку

git branch -l - список веток

git branch -d branch_name - удалить ветку

git push --delete origin branch_name - удалить ветку с сервера

git diff branch1..branch2 - сравнить две ветки

git fetch - Получить обновленный репозиторий не сливая его с локальной версией

git diff master..origin/master - сравнить локальный с обновленным


 1.8 Слияние и разрешение конфликтов

git merge branch_name - слияние с веткой

git merge --abort - отмена слияния


 1.9 Полезные инструменты 

git stash	- сохраняет код без коммита
git stash list
git stash pop

git blame filename - посмотреть когда и кто писал код

git gc - "Garbage collection" - Эта команда выполняет несколько действий: собирает все «рыхлые» объекты и упаковывает их в pack-файлы; объединяет несколько упакованных файлов в один большой; удаляет недостижимые объекты, хранящиеся дольше нескольких месяцев.


 1.10 Правила работы с Git 

Ветки нужно именовать в соответствие задачи или типа билда

Осмысленные коммиты

Принято начинать название коммита и название ветки с номера задачи.

Бывает правило компании делать коммиты по окончанию рабочего дня, но это не является лучшей практикой.

Перед git push рекомендуется делать git pull. Чтобы вы сами сделали слияние с изменениями над которыми вы работали.

Правило хорошего тона использовать git только по назначению т.е. для отслеживания версий програмного кода. Не стоит использовать git для бэкапа или для логов, картинок и т.д.

Придерживаться процесса, принятого в команде.


 1.11 Бонусный урок: публикация проекта на github 

Создать ключ ssh

|

5.7 Правила работы с Git 

Именование веток:

1 Вариант:

Именование ветки под задачу.

В начале номер задачи

Используются цифры, латиница в нижнем регистре и дефис

Название отражает суть решаемой задачи

2 Вариант: 

Именование ветки под этапы разработки

master / main

dev

test / staging

production

fixes / hot-fixes

Что должно быть в коммите:

Завершенные задачи. Результаты работы за период.

https://www.conventionalcommits.org
